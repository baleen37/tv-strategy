name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          venv/
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: make install

    - name: Run code quality checks
      run: |
        echo "::group::Code Quality Checks"
        make check
        echo "::endgroup::"

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      coverage: ${{ steps.coverage-check.outputs.coverage }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          venv/
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: make install

    - name: Run tests with coverage
      run: |
        echo "::group::Running Tests"
        make test 2>&1 | tee test_output.txt
        echo "::endgroup::"

    - name: Extract coverage
      id: coverage-check
      run: |
        if [ -f htmlcov/index.html ]; then
          coverage=$(grep -o '[0-9]\+%' htmlcov/index.html | head -1 | sed 's/%//')
          echo "coverage=$coverage" >> $GITHUB_OUTPUT
          echo "Coverage: $coverage%"
        else
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "Coverage: 0%"
        fi

    - name: Check coverage threshold
      run: |
        coverage=${{ steps.coverage-check.outputs.coverage }}
        if [ "$coverage" -lt 70 ]; then
          echo "❌ Coverage $coverage% is below required 70%"
          exit 1
        else
          echo "✅ Coverage $coverage% meets requirement (70%+ required)"
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-output
        path: test_output.txt

  ci-result:
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: always()
    outputs:
      success: ${{ steps.result.outputs.success }}
    steps:
    - name: Check CI status
      id: result
      run: |
        if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ All CI checks passed"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ CI checks failed"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Test: ${{ needs.test.result }}"
          exit 1
        fi

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
