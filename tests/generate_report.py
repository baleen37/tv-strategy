#!/usr/bin/env python3
"""
Generate validation report for the cryptocurrency backtesting system.
"""

from datetime import datetime
from pathlib import Path
from typing import Any


def check_pine_scripts() -> dict[str, Any]:
    """Check Pine Script files."""
    root = Path(__file__).parent.parent
    strategies_dir = root / "src" / "strategies"

    if not strategies_dir.exists():
        return {"status": "error", "message": "Strategies directory not found"}

    pine_files = list(strategies_dir.glob("*.pine"))
    return {"status": "success", "count": len(pine_files), "files": [f.name for f in pine_files]}


def check_test_coverage() -> dict[str, Any]:
    """Check test files."""
    root = Path(__file__).parent.parent
    tests_dir = root / "tests"

    test_files = list(tests_dir.glob("test_*.py"))
    return {"status": "success", "count": len(test_files), "files": [f.name for f in test_files]}


def check_project_structure() -> dict[str, Any]:
    """Check project structure."""
    from check_structure import check_project_structure as check_structure

    success, errors = check_structure()
    return {"status": "success" if success else "error", "errors": errors if not success else []}


def generate_report() -> None:
    """Generate and print validation report."""
    report = {
        "generated_at": datetime.now().isoformat(),
        "project": "Cryptocurrency Backtesting System",
        "checks": {
            "pine_scripts": check_pine_scripts(),
            "test_coverage": check_test_coverage(),
            "project_structure": check_project_structure(),
        },
    }

    print("# Validation Report")
    print(f"\n**Generated:** {report['generated_at']}")
    print(f"**Project:** {report['project']}")
    print()

    # Pine Scripts
    pine_check = report["checks"]["pine_scripts"]
    print("## Pine Script Strategies")
    if pine_check["status"] == "success":
        print(f"✅ Found {pine_check['count']} Pine Script files:")
        for file in pine_check["files"]:
            print(f"  - {file}")
    else:
        print(f"❌ {pine_check['message']}")
    print()

    # Test Coverage
    test_check = report["checks"]["test_coverage"]
    print("## Test Coverage")
    print(f"✅ Found {test_check['count']} test files:")
    for file in test_check["files"]:
        print(f"  - {file}")
    print()

    # Project Structure
    structure_check = report["checks"]["project_structure"]
    print("## Project Structure")
    if structure_check["status"] == "success":
        print("✅ Project structure is valid")
    else:
        print("❌ Project structure issues:")
        for error in structure_check["errors"]:
            print(f"  - {error}")
    print()

    print("---")
    print("*Report generated by tests/generate_report.py*")


if __name__ == "__main__":
    generate_report()
